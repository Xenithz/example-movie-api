name: Node CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  container-job:
    runs-on: ubuntu-latest
    
    # runs all of the steps inside the specified container rather than on the VM host.  
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image:  node:alpine

    services:
      postgres:
        image: postgres:10.8
        env:
          DB_USER: test_user
          DB_PASSWORD: foobar
          DB_NAME: example_movie_api
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1     
    - run: npm ci
    - run: npm run migrate
      env:
        # use postgres for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        DB_HOST: postgres
        DB_PORT: ${{ job.services.postgres.ports[5432] }}
    - run: npm run seed
    - run: npm run test

  # build:

  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [8.x, 10.x, 12.x]

  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: npm install, build, and test
  #     run: |
  #       npm ci
  #       npm run build --if-present
  #       npm test
  #     env:
  #       CI: true
